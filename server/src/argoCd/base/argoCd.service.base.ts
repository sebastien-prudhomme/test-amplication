/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, ArgoCd, User } from "@prisma/client";

export class ArgoCdServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ArgoCdFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArgoCdFindManyArgs>
  ): Promise<number> {
    return this.prisma.argoCd.count(args);
  }

  async findMany<T extends Prisma.ArgoCdFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArgoCdFindManyArgs>
  ): Promise<ArgoCd[]> {
    return this.prisma.argoCd.findMany(args);
  }
  async findOne<T extends Prisma.ArgoCdFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArgoCdFindUniqueArgs>
  ): Promise<ArgoCd | null> {
    return this.prisma.argoCd.findUnique(args);
  }
  async create<T extends Prisma.ArgoCdCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArgoCdCreateArgs>
  ): Promise<ArgoCd> {
    return this.prisma.argoCd.create<T>(args);
  }
  async update<T extends Prisma.ArgoCdUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArgoCdUpdateArgs>
  ): Promise<ArgoCd> {
    return this.prisma.argoCd.update<T>(args);
  }
  async delete<T extends Prisma.ArgoCdDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArgoCdDeleteArgs>
  ): Promise<ArgoCd> {
    return this.prisma.argoCd.delete(args);
  }

  async getUserId(parentId: string): Promise<User | null> {
    return this.prisma.argoCd
      .findUnique({
        where: { id: parentId },
      })
      .userId();
  }
}
